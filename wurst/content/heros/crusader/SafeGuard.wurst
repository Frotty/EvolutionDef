package SafeGuard

import Hero
import ClosureEvents
import ClosureTimers
import DamageMod
import Damager
import Lightning
import AbilityTooltipGenerator
import Interpolation

public int SAFEGUARD_SPELL_ID

constant SAFEGUARD_NAME = "Safe Guard"
constant SAFEGUARD_HOTKEY = "E"
constant SAFEGUARD_MAXLVL = 4
constant SLIDE_DURATION = 0.6
constant SAFEGUARD_DESCR = "Shields an allied hero, and transmits all the damage it takes to the crusader.|n At the end of the effect the crusader heals for percentage of the taken damage. If crusader leaves the target's side, the effect ends."

function getSafeGuardDuration(int lvl) returns real
	return 5. + 1 * lvl
	
function getSafeGuardHealPercent(int lvl) returns real
	return 50. + 0.125 * lvl

function getSafeGuardCooldown(int lvl) returns real
	return 26 - 3. * lvl
	
function getSafeGuardManaCost(int lvl) returns int
	return 35 - 5*lvl
	
function getMaxDistance(int lvl) returns real
	return 300. + 50. * lvl

public class SafeGuardCast
	Hero caster
	real sg_damage // saves incoming damage for healback
	texttag sg_tt
	
	construct(Hero cast, unit target, int lvl)
		caster = cast
		castSafeGuard(target, lvl)

	//OnDamage onDamageClosure
	
	function castSafeGuard(unit target, int lvl) // E ability of Crusader. Allied hero cast.
		// Should probably work on summouns (of there every happen any) too
		let targetEntity = target.getEntity()
		if target == caster.actor //Different effect if casted on self.
			let eff = AddSpecialEffectTarget("Models\\DivineBarrier1.mdx",targetEntity.actor,"origin")
			sg_tt = createTTEx(target.getPos().withZ(150), "", 11, colorA(122,200,255,255))
			caster.actor..setPropWindow(GetUnitDefaultPropWindow(caster.actor))..setTurnSpeed(GetUnitDefaultTurnSpeed(caster.actor))..setTimeScale(1.)
			OnDamage ond = (unit damaged, unit source, real amount) -> begin
				let dmg = getDamage()
				sg_tt.setText(sg_damage.toInt().toString(),11)
				AddSpecialEffectTarget("Abilities\\Spells\\Human\\Feedback\\SpellBreakerAttack.mdl",targetEntity.actor,"origin").destr()
				sg_damage += dmg
			end
			
			onDamage(target, ond)
			doPeriodicallyTimed(ANIMATION_PERIOD, getSafeGuardDuration(lvl), (CallbackCounted cb) -> begin
				sg_tt.setPos(target.getPos().withZ(150))
				if cb.isLast()
					eff.destr()
					caster.actor.setHP(caster.actor.getHP() + sg_damage * getSafeGuardHealPercent(lvl) *0.5)
					sg_damage = 0
					AddSpecialEffectTarget("Abilities\\Spells\\Human\\HolyBolt\\HolyBoltSpecialArt.mdl",caster.actor,"origin").destr()
					sg_tt.destr()
					destroy cb
					destroy ond
					destroy this
			end)

		else
			// Create local vars to be captured by closure (ignore warning)
			let speed = 600.
			let zoffset = vec3(0,0,50) // Lightning height offset
			let ang = caster.getPos2().angleTo(targetEntity.getPos2())
			let dist = caster.getPos2().distToVec(targetEntity.getPos2())
			let spos = caster.getPos2()
			addEffect("Abilities\\Spells\\Human\\Feedback\\SpellBreakerAttack.mdl",targetEntity.getPos2())
			addEffect("Abilities\\Spells\\Human\\Feedback\\SpellBreakerAttack.mdl",caster.getPos2())
			caster.actor..setPropWindow(0)..setTurnSpeed(0)..setTimeScale(10.)
			doPeriodicallyTimed(ANIMATION_PERIOD, SLIDE_DURATION, (CallbackCounted cb) -> begin
				caster.setPos2(spos.polarOffset(ang, bezier_3(0, dist * 0.8, dist, 1 - cb.getCount() / SLIDE_DURATION*ANIMATION_PERIOD)), false)
				caster.actor..setAnimation("walk")..queueAnimation("walk")
			end)
			//jump_duration *= ANIMATION_PERIOD // this was in because of old entity system 
			doAfter(SLIDE_DURATION, () -> begin //We only add the effects of the ability when the jump is done.
				var maxDistance = getMaxDistance(lvl)
				let lng = addLightning("SPLK", true, caster.getPos3()+zoffset, targetEntity.getPos3()+zoffset)
				let eff = AddSpecialEffectTarget("Models\\DivineBarrier1.mdx",targetEntity.actor,"origin")
				sg_tt = createTTEx(target.getPos().withZ(150), "", 11, colorA(122,200,255,255))
				caster.actor..setPropWindow(GetUnitDefaultPropWindow(caster.actor))..setTurnSpeed(GetUnitDefaultTurnSpeed(caster.actor))..setTimeScale(1.)
				OnDamage ond = (unit damaged, unit source, real amount) -> begin
					let dmg = getDamage() //* 0.75
					modifyDamage(0)//(getDamage() * 0.25)
					
					var col = lng.getColor()
					if col.green > 150
						col.green = 2
						col.blue = 2
					sg_tt.setText(sg_damage.toInt().toString(),11)
					lng.setColor(col)
					AddSpecialEffectTarget("Abilities\\Spells\\Human\\Feedback\\SpellBreakerAttack.mdl",targetEntity.actor,"origin").destr()
					AddSpecialEffectTarget("Abilities\\Spells\\Human\\Feedback\\SpellBreakerAttack.mdl",caster.actor,"origin").destr()
					sg_damage += dmg
					source.damageTarget(caster.actor, dmg)
				end
				
				onDamage(target, ond)
				doPeriodicallyTimed(ANIMATION_PERIOD, getSafeGuardDuration(lvl), (CallbackCounted cb) -> begin
					let dist2 = caster.getPos2().distToVec(targetEntity.getPos2())
					var col = lng.getColor()
					col.alpha = bezier_3(0, 200, 255, 1 - (dist2 / maxDistance)).toInt()
					if col.blue < 255
						col.blue = (col.blue*1.3).toInt()
					if col.green < 255
						col.green = (1.3*col.green).toInt()
					lng..move(true, caster.getPos3()+zoffset, targetEntity.getPos3()+zoffset)
					..setColor(col)
					sg_tt.setPos(target.getPos().withZ(150))
					if cb.isLast() or caster.getPos2().distToVec(targetEntity.getPos2()) > maxDistance
						lng.destr()
						eff.destr()
						caster.actor.setHP(caster.actor.getHP() + sg_damage * getSafeGuardHealPercent(lvl))
						sg_damage = 0
						AddSpecialEffectTarget("Abilities\\Spells\\Human\\HolyBolt\\HolyBoltSpecialArt.mdl",caster.actor,"origin").destr()
						sg_tt.destr()
						destroy cb
						destroy ond
						destroy this
				end)
			end)

public function init_SafeGuard(boolean compileTime)
	SAFEGUARD_SPELL_ID = ABIL_ID_GEN.next()
	
	if compileTime
		var safeguard = new ChannelAbilityPreset(SAFEGUARD_SPELL_ID, 4)
		// Set Attributes
		safeguard..removeChannelProperties(true, true)..setName("Safeguard")
			..setButtonPositionNormalX(2)..setButtonPositionNormalY(2)
			..setButtonPositionResearchX(2)..setButtonPositionResearchY(0)
			..presetIcon("BTNSpell_Holy_HolyNova")
			..setCastRange(1,400)..presetTargetTypes(Targettype.UTARGET)
			..setTargetsAllowed(1,"friend")..presetHotkey(SAFEGUARD_HOTKEY)
		for i = 1 to 4
			safeguard..setManaCost(i, getSafeGuardManaCost(i))
			..setCooldown(i, getSafeGuardCooldown(i))
		new AbilityTooltipGenerator(SAFEGUARD_NAME, SAFEGUARD_HOTKEY, Targettype.UTARGET, SAFEGUARD_MAXLVL, SAFEGUARD_DESCR)
		..addProperty("Cast Range:", (400.).toString())
		..addProperty("Duration:", (int lvl) -> getSafeGuardDuration(lvl).toString())
		..addProperty("Cooldown:", (int lvl) -> getSafeGuardCooldown(lvl).toString())
		..addProperty("Heal Damage%:", (int lvl) -> (getSafeGuardHealPercent(lvl)*100).toInt().toString())
		..applyToDef(safeguard)
		