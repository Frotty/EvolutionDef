package Napalm
import Explosive
import Image
import ChannelAbilityPreset
import MapStuff
import ClosureTimers
import Hero
import initlater XBurn
import ClosureForGroups
import SoundHelper
import CollisionDetection
import Creep

constant NAPALM_DURATION = 4
constant NAPALM_BURN_DURATION = 5
constant NAPALM_NAME = "Drop Napalm"
constant NAPALM_HOTKEY = "W"

public constant IGNITE_DISTANCE_SQ = 75*75

public int NAPALM_SPELL_ID

public function getNapalmDropDuration(int lvl) returns int
	return min(5, 2 + lvl)
	
function getNapalmLifespan(int lvl) returns int
	return min(12, 6 + 2 * lvl)
	
function getNapalmCooldown(int lvl) returns real
	return (16 - lvl * 1.5).round() * 1.
	
function getNapalmManaCost(int lvl) returns int
	return 20 + 10 * lvl
	
public constant DROP_SOUND = new Sound("Sounds\\sfx_napalm_drop.mp3", 4838, false)

public LinkedList<NapalmDroplet> freshNapalms = new LinkedList<NapalmDroplet>()
public LinkedList<NapalmDroplet> burningNapalms = new LinkedList<NapalmDroplet>()

public class NapalmDroplet
	Hero caster
	vec2 pos
	effect fireSfx = null
	image img = null
	int lvl
	colorA col = colorA(255,255,255,0)
	
	construct(vec2 pos, Hero caster, int lvl)
		this.pos = pos
		this.caster = caster
		var path = "Textures\\NapalmDrop"
		this.lvl = lvl
		path += GetRandomInt(0, 7).toString()
		path += ".blp"
		img = createImage(path, pos, 64, 64)..show()..setLevel(Layer.L4)
		freshNapalms.add(this)
		
	function ignite()
		fireSfx = addEffect(firePaths[GetRandomInt(0, firePathCount)], pos)
		burningNapalms.add(this)
		freshNapalms.remove(this)
		
		doPeriodicallyTimed(0.25, getNapalmLifespan(lvl) * 1., (CallbackCounted cb) -> begin
			col.alpha = (255 * (cb.getCount()/40)).toInt()
			img.setColor(col)
			forUnitsInRange(pos, 64, (unit u) -> begin
				if u.isAlive() and u.getEntity() instanceof Creep
					if u.hasXBurn()
						u.refreshXBurn()
					else
						u.addXBurn(caster, 1)
			end)
			for n in freshNapalms
				if pos.distToVecSquared(n.pos) < IGNITE_DISTANCE_SQ
					n.ignite()					
			for e in explosiveEntities
				if pos.distToVecSquared(e.getPos2()) < IGNITE_DISTANCE_SQ
					e.explode()
					
			if cb.isLast()
				destroy this
		end)
		
	ondestroy
		fireSfx.destr()
		img.remove()
		burningNapalms.remove(this)
		
	
public function init_Napalm(boolean c)
	NAPALM_SPELL_ID = ABIL_ID_GEN.next()
	if c
		let spreset = new ChannelAbilityPreset(NAPALM_SPELL_ID, 4)
		// Set Attributes
		spreset..removeChannelProperties(true, true)..setName("Napalm")..presetButtonPosNormal(1,2)
			..presetIcon("BTNFieryExplosion")..setRequiredLevel(2)
		for i = 1 to 4
			spreset..setCooldown(i, getNapalmCooldown(i))
			..setManaCost(i, getNapalmManaCost(i))
		new AbilityTooltipGenerator(NAPALM_NAME, NAPALM_HOTKEY, Targettype.NOTARGET, 4, "Starts dropping Napalm for a given duration.\nThe napalm sticks to the ground and lasts until it gets ignited.\n" 
																						+ "You can ignite Napalm with any fire source. Napalm ignites all objects around it.\n"
																						+ "Enemies that run into Napalm cannot lose XBurn.")
		..addProperty("Cooldown:", (int lvl) -> getNapalmCooldown(lvl).toString())
		..addProperty("Mana Cost:", (int lvl) -> getNapalmManaCost(lvl).toString())
		..addProperty("Dropping Duration:", (int lvl) -> getNapalmDropDuration(lvl).toString())
		..addProperty("Lifespan:", (int lvl) -> getNapalmLifespan(lvl).toString())
		..applyToDef(spreset)
			
		
string array firePaths
int firePathCount = 5

init
	firePaths[0] = "Environment\\LargeBuildingFire\\LargeBuildingFire1.mdl" 
	firePaths[1] = "Environment\\LargeBuildingFire\\LargeBuildingFire2.mdl" 
	firePaths[2] = "Environment\\SmallBuildingFire\\SmallBuildingFire2.mdl" 
	firePaths[3] ="Environment\\NightElfBuildingFire\\ElfLargeBuildingFire1.mdl" 
	firePaths[4] = "Environment\\NightElfBuildingFire\\ElfLargeBuildingFire2.mdl" 
	firePaths[5] = "Environment\\UndeadBuildingFire\\UndeadLargeBuildingFire2.mdl" 
