package DamageMod
import AbilityObjEditing
/* Modify the damage inside an damage-event callback */

constant DAMAGE_ABIL_ID = 'xdmo'
constant MAX_HP_GAINED = 50000

/** Returns the modified damage of a dammageEvent */
public function getDamage() returns real
	if N != -1 and currentDamager == GetEventDamageSource() 
		return damageArray[N]

	return GetEventDamage() - lifeMod

/** Modifies damage to a value */
public function modifyDamage( real damage )
	unit u
	real life
	real missinglife
	real lMod
	if N != -1 and currentDamager == GetEventDamageSource() 
		damageArray[N] = damage
	else
		if currentDamager != GetEventDamageSource() 
			currentDamager = GetEventDamageSource()
			lifeMod = 0.

		u = GetTriggerUnit()
		life = GetWidgetLife(u)
		missinglife = GetUnitState(u, UNIT_STATE_MAX_LIFE) - life
		lMod = GetEventDamage() - lifeMod - damage
		if GetUnitAbilityLevel(u, DAMAGE_ABIL_ID) == 0 and lMod <= missinglife and life + lMod >= 0.405 
			SetWidgetLife(u, life + lMod)
			lifeMod += lMod
		else
			N++
			damageArray[N] = damage
			damagedArray[N] = u
			damagerArray[N] = GetEventDamageSource()
			trig[N] = GetTriggeringTrigger()
			applied[N] = GetUnitAbilityLevel(u, DAMAGE_ABIL_ID) == 0
			if applied[N] 
				UnitAddAbility(u, DAMAGE_ABIL_ID)


			SetWidgetLife(u, GetWidgetLife(u) + GetEventDamage() - lifeMod)

		TimerStart(tim, 0., false, function applyDamageMod)
		u = null


/** Modifies damage by a value */
public function modifyDamageBy(real damage)
	modifyDamage(damage + getDamage())


timer tim = CreateTimer()
unit currentDamager = null
real lifeMod = 0.
int N = -1

real array damageArray
unit array damagedArray
unit array damagerArray
trigger array trig
boolean array applied


function applyDamageMod()
	int n = 0
	real maxlife
	real percent
	boolean b
	currentDamager = null
	lifeMod = 0.
	for i = 0 to N
		maxlife = damagedArray[n].getState(UNIT_STATE_MAX_LIFE)
		percent = (GetWidgetLife(damagedArray[n]) / maxlife) - (damageArray[n] / (maxlife - MAX_HP_GAINED))
		if percent > 0.405 / (maxlife - MAX_HP_GAINED) 
			SetWidgetLife(damagedArray[n], percent*maxlife)
		else
			b = IsTriggerEnabled(trig[n])
			DisableTrigger(trig[n])
			UnitDamageTarget(damagerArray[n], damagedArray[n], 1000000000., false, false, ATTACK_TYPE_CHAOS, null, null)
			if b 
				EnableTrigger(trig[n])
		
		if applied[n] 
			UnitRemoveAbility(damagedArray[n], DAMAGE_ABIL_ID)
		
		damagedArray[n] = null
		damagerArray[n] = null
		trig[n] = null


	N = -1
	
	
@compiletime function generateObject()
	let def = new AbilityDefinitionMaxLifeBonusGreater(DAMAGE_ABIL_ID)
	def.setMaxLifeGained(1, MAX_HP_GAINED)
	

